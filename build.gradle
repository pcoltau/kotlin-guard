plugins {
    //id('org.jmailen.kotlinter').version('1.23.1')
    id("org.jetbrains.kotlin.jvm")
    id("com.github.breadmoirai.github-release").version("2.2.9").apply(true)
    id("io.gitlab.arturbosch.detekt").apply(true)
    id("com.jfrog.bintray").apply(true)
    id("org.jetbrains.dokka").apply(true)
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

assert name == 'kotlin-guard'
description = 'Kotlin implementation of Swift\'s guard keyword'

group 'com.pcoltau'
version = "0.1.4"

def githubTokenOrEmpty = hasProperty('githubToken') ? githubToken : ''

project.ext {
    githubUser = "pcoltau"
    vcsDev = "https://github.com/$githubUser"
    githubRepo = "$githubUser/$name"
    vcsUrl = "https://github.com/$githubRepo"
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

test {
    useJUnitPlatform()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

detekt {
    // remove this when plugin stops choosing latest version by default
    //version = "$detekt_version"

    input = files("src/main/kotlin")

    filters = ".*/resources/.*,.*/build/.*"
    //config = files("detekt.yml")
}

dokka {
    moduleName = project.name

    linkMapping {
        dir = "src/main/kotlin"
        url = "$project.ext.vcsUrl/blob/master/src/main/kotlin"
        suffix = "#L"
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir

    linkMapping {
        dir = "src/main/kotlin"
        url = "$project.ext.vcsUrl/blob/master/src/main/kotlin"
        suffix = "#L"
    }
}


task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if (System.env.CI != "true") {
    def pomConfig = {
        packaging 'jar'

        name project.name
        description project.description
        url project.ext.vcsUrl

        scm {
            connection "scm:git:$project.ext.vcsUrl"
            developerConnection "scm:git:$project.ext.vcsDev"
            url "$project.ext.vcsUrl"
        }

        licenses {
            license {
                name "MIT License"
                url "https://opensource.org/licenses/MIT"
                distribution "repo"
            }
        }

        developers {
            developer {
                id "pcoltau"
                name "Pelle Stenild Coltau"
            }
        }
    }

    signing {
        sign configurations.archives
    }

    /*
    assert ossrhUsername?.trim()
    assert ossrhPassword?.trim()

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsernameOrEmpty, password: ossrhPasswordOrEmpty)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsernameOrEmpty, password: ossrhPasswordOrEmpty)
                }

                pom.project pomConfig
            }
        }
    }

    // Based on https://github.com/bintray/gradle-bintray-plugin
    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')

        pkg {
            repo = 'maven'
            name = project.name
            desc = project.description

            licenses = ['MIT']
            vcsUrl = "$project.ext.vcsUrl"
            websiteUrl = "$project.ext.vcsUrl"
            issueTrackerUrl = "$project.ext.vcsUrl/issues"
            githubRepo = project.ext.githubRepo
            githubReleaseNotesFile = 'CHANGELOG.md'

            version {
                name = project.version
                desc = "$project.name version $project.version"
                released = new Date()
                vcsTag = "$project.version"
            }
        }

        publications = ['MyPublication']
    }
*/
    // Create the publication with the pom configuration:
    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    root.children().last() + pomConfig
                }
            }
        }
    }

    githubRelease {
        token githubTokenOrEmpty
        draft false // by default this is false
        prerelease false // by default this is false
        tagName "${project.version}"
        releaseName "${project.version}"
        releaseAssets jar.destinationDirectory.asFile.get().listFiles() // this points to which files you want to upload as assets with your release
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}